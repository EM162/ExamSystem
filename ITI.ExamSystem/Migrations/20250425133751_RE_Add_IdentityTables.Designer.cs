// <auto-generated />
using System;
using ITI.ExamSystem.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ITI.ExamSystem.Migrations
{
    [DbContext(typeof(OnlineExaminationDBContext))]
    [Migration("20250425133751_RE_Add_IdentityTables")]
    partial class RE_Add_IdentityTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CourseTrack", b =>
                {
                    b.Property<int>("CourseID")
                        .HasColumnType("int");

                    b.Property<int>("TrackID")
                        .HasColumnType("int");

                    b.HasKey("CourseID", "TrackID")
                        .HasName("PK__CourseTr__DE8A3E0B4E998204");

                    b.HasIndex("TrackID");

                    b.ToTable("CourseTracks", (string)null);
                });

            modelBuilder.Entity("ExamQuestion", b =>
                {
                    b.Property<int>("ExamID")
                        .HasColumnType("int");

                    b.Property<int>("QuestionID")
                        .HasColumnType("int");

                    b.HasKey("ExamID", "QuestionID")
                        .HasName("PK__ExamQues__F9A9275FF4688832");

                    b.HasIndex("QuestionID");

                    b.ToTable("ExamQuestions", (string)null);
                });

            modelBuilder.Entity("ITI.ExamSystem.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("MustChangePassword")
                        .HasColumnType("bit");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ITI.ExamSystem.Models.Branch", b =>
                {
                    b.Property<int>("BranchID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BranchID"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("BranchID")
                        .HasName("PK__Branch__A1682FA555BC9467");

                    b.ToTable("Branch");
                });

            modelBuilder.Entity("ITI.ExamSystem.Models.Course", b =>
                {
                    b.Property<int>("CourseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseID"));

                    b.Property<string>("CourseImagePath")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CourseID")
                        .HasName("PK__Courses__C92D718780B52891");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("ITI.ExamSystem.Models.Exam", b =>
                {
                    b.Property<int>("ExamID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExamID"));

                    b.Property<int?>("CourseID")
                        .HasColumnType("int");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ExamDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ExamType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("MCQQuestionCount")
                        .HasColumnType("int");

                    b.Property<int>("TrueFalseQuestionCount")
                        .HasColumnType("int");

                    b.HasKey("ExamID")
                        .HasName("PK__Exams__297521A7696E1DDD");

                    b.HasIndex("CourseID");

                    b.ToTable("Exams");
                });

            modelBuilder.Entity("ITI.ExamSystem.Models.Intake", b =>
                {
                    b.Property<int>("IntakeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IntakeID"));

                    b.Property<string>("IntakeName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.HasKey("IntakeID")
                        .HasName("PK__Intake__7E1E28554E39452C");

                    b.HasIndex(new[] { "IntakeName" }, "UQ__Intake__DFAC2D0BA41CD50E")
                        .IsUnique();

                    b.ToTable("Intake");
                });

            modelBuilder.Entity("ITI.ExamSystem.Models.IntakeBranchTrackUser", b =>
                {
                    b.Property<int>("IntakeID")
                        .HasColumnType("int");

                    b.Property<int>("BranchID")
                        .HasColumnType("int");

                    b.Property<int>("TrackID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("IntakeID", "BranchID", "TrackID", "UserID")
                        .HasName("PK__IntakeBr__3FA3A6DB65D1BE0E");

                    b.HasIndex("BranchID");

                    b.HasIndex("TrackID");

                    b.HasIndex("UserID");

                    b.ToTable("IntakeBranchTrackUsers");
                });

            modelBuilder.Entity("ITI.ExamSystem.Models.PublishedExam", b =>
                {
                    b.Property<int>("PublishedExamID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PublishedExamID"));

                    b.Property<int>("BranchID")
                        .HasColumnType("int");

                    b.Property<int>("CourseID")
                        .HasColumnType("int");

                    b.Property<int>("ExamID")
                        .HasColumnType("int");

                    b.Property<int>("IntakeID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PublishDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("TrackID")
                        .HasColumnType("int");

                    b.HasKey("PublishedExamID")
                        .HasName("PK__Publishe__D6338807982EE270");

                    b.HasIndex("BranchID");

                    b.HasIndex("CourseID");

                    b.HasIndex("ExamID");

                    b.HasIndex("IntakeID");

                    b.HasIndex("TrackID");

                    b.ToTable("PublishedExams");
                });

            modelBuilder.Entity("ITI.ExamSystem.Models.Question", b =>
                {
                    b.Property<int>("QuestionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionID"));

                    b.Property<decimal?>("Grade")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestionType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("TopicID")
                        .HasColumnType("int");

                    b.HasKey("QuestionID")
                        .HasName("PK__Question__0DC06F8C60492EEC");

                    b.HasIndex("TopicID");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("ITI.ExamSystem.Models.QuestionChoice", b =>
                {
                    b.Property<int>("ChoiceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChoiceID"));

                    b.Property<int?>("ChoiceOrder")
                        .HasColumnType("int");

                    b.Property<string>("ChoiceText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CorrectChoice")
                        .HasColumnType("int");

                    b.Property<int>("QuestionID")
                        .HasColumnType("int");

                    b.HasKey("ChoiceID")
                        .HasName("PK__Question__76F516867C6897C3");

                    b.HasIndex("QuestionID");

                    b.ToTable("QuestionChoice");
                });

            modelBuilder.Entity("ITI.ExamSystem.Models.Role", b =>
                {
                    b.Property<int>("RoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleID"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("RoleID")
                        .HasName("PK__Role__8AFACE3A40E8C610");

                    b.HasIndex(new[] { "RoleName" }, "UQ__Role__8A2B616051E8E656")
                        .IsUnique();

                    b.ToTable("Role");
                });

            modelBuilder.Entity("ITI.ExamSystem.Models.Topic", b =>
                {
                    b.Property<int>("TopicID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TopicID"));

                    b.Property<int?>("CourseID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TopicName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("TopicID")
                        .HasName("PK__Topics__022E0F7DAAE83A79");

                    b.HasIndex("CourseID");

                    b.ToTable("Topics");
                });

            modelBuilder.Entity("ITI.ExamSystem.Models.Track", b =>
                {
                    b.Property<int>("TrackID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TrackID"));

                    b.Property<string>("TrackName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("TrackID")
                        .HasName("PK__Track__7A74F8C031737D9F");

                    b.ToTable("Track");
                });

            modelBuilder.Entity("ITI.ExamSystem.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasMaxLength(255)
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ProfileImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RegistrationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("UserID")
                        .HasName("PK__Users__1788CCAC9B6E0D48");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex(new[] { "Email" }, "UQ__Users__A9D10534146454C2")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ITI.ExamSystem.Models.UserExam", b =>
                {
                    b.Property<int>("ExamID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<int>("Grade")
                        .HasColumnType("int");

                    b.HasKey("ExamID", "UserID")
                        .HasName("PK__UserExam__F80DAD6D70CA2EF0");

                    b.HasIndex("UserID");

                    b.ToTable("UserExam");
                });

            modelBuilder.Entity("ITI.ExamSystem.Models.UsersExamsQuestion", b =>
                {
                    b.Property<int>("ExamID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<int>("QuestionID")
                        .HasColumnType("int");

                    b.Property<string>("StudentAnswer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("StudentScore")
                        .HasColumnType("decimal(5, 2)");

                    b.HasKey("ExamID", "UserID", "QuestionID");

                    b.HasIndex("QuestionID");

                    b.HasIndex("UserID");

                    b.ToTable("UsersExamsQuestions");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("UserRole", b =>
                {
                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.HasKey("UserID", "RoleID")
                        .HasName("PK__UserRole__AF27604F5D72267B");

                    b.HasIndex("RoleID");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("UsersCourse", b =>
                {
                    b.Property<int>("CourseID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("CourseID", "UserID")
                        .HasName("PK__UsersCou__1855FD4DC353C6D1");

                    b.HasIndex("UserID");

                    b.ToTable("UsersCourses", (string)null);
                });

            modelBuilder.Entity("CourseTrack", b =>
                {
                    b.HasOne("ITI.ExamSystem.Models.Course", null)
                        .WithMany()
                        .HasForeignKey("CourseID")
                        .IsRequired()
                        .HasConstraintName("FK_CourseTracks_Course");

                    b.HasOne("ITI.ExamSystem.Models.Track", null)
                        .WithMany()
                        .HasForeignKey("TrackID")
                        .IsRequired()
                        .HasConstraintName("FK_CourseTracks_Track");
                });

            modelBuilder.Entity("ExamQuestion", b =>
                {
                    b.HasOne("ITI.ExamSystem.Models.Exam", null)
                        .WithMany()
                        .HasForeignKey("ExamID")
                        .IsRequired()
                        .HasConstraintName("FK_ExamQuestions_Exam");

                    b.HasOne("ITI.ExamSystem.Models.Question", null)
                        .WithMany()
                        .HasForeignKey("QuestionID")
                        .IsRequired()
                        .HasConstraintName("FK_ExamQuestions_Question");
                });

            modelBuilder.Entity("ITI.ExamSystem.Models.Exam", b =>
                {
                    b.HasOne("ITI.ExamSystem.Models.Course", "Course")
                        .WithMany("Exams")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Exams__CourseID__40C49C62");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("ITI.ExamSystem.Models.IntakeBranchTrackUser", b =>
                {
                    b.HasOne("ITI.ExamSystem.Models.Branch", "Branch")
                        .WithMany("IntakeBranchTrackUsers")
                        .HasForeignKey("BranchID")
                        .IsRequired()
                        .HasConstraintName("FK_YBT_Branch");

                    b.HasOne("ITI.ExamSystem.Models.Intake", "Intake")
                        .WithMany("IntakeBranchTrackUsers")
                        .HasForeignKey("IntakeID")
                        .IsRequired()
                        .HasConstraintName("FK_YBT_Year");

                    b.HasOne("ITI.ExamSystem.Models.Track", "Track")
                        .WithMany("IntakeBranchTrackUsers")
                        .HasForeignKey("TrackID")
                        .IsRequired()
                        .HasConstraintName("FK_YBT_Track");

                    b.HasOne("ITI.ExamSystem.Models.User", "User")
                        .WithMany("IntakeBranchTrackUsers")
                        .HasForeignKey("UserID")
                        .IsRequired()
                        .HasConstraintName("FK_YBT_Manager");

                    b.Navigation("Branch");

                    b.Navigation("Intake");

                    b.Navigation("Track");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ITI.ExamSystem.Models.PublishedExam", b =>
                {
                    b.HasOne("ITI.ExamSystem.Models.Branch", "Branch")
                        .WithMany("PublishedExams")
                        .HasForeignKey("BranchID")
                        .IsRequired()
                        .HasConstraintName("FK_PublishedExams_Branch");

                    b.HasOne("ITI.ExamSystem.Models.Course", "Course")
                        .WithMany("PublishedExams")
                        .HasForeignKey("CourseID")
                        .IsRequired()
                        .HasConstraintName("FK_PublishedExams_Course");

                    b.HasOne("ITI.ExamSystem.Models.Exam", "Exam")
                        .WithMany("PublishedExams")
                        .HasForeignKey("ExamID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PublishedExams_Exam");

                    b.HasOne("ITI.ExamSystem.Models.Intake", "Intake")
                        .WithMany("PublishedExams")
                        .HasForeignKey("IntakeID")
                        .IsRequired()
                        .HasConstraintName("FK_PublishedExams_Intake");

                    b.HasOne("ITI.ExamSystem.Models.Track", "Track")
                        .WithMany("PublishedExams")
                        .HasForeignKey("TrackID")
                        .IsRequired()
                        .HasConstraintName("FK_PublishedExams_Track");

                    b.Navigation("Branch");

                    b.Navigation("Course");

                    b.Navigation("Exam");

                    b.Navigation("Intake");

                    b.Navigation("Track");
                });

            modelBuilder.Entity("ITI.ExamSystem.Models.Question", b =>
                {
                    b.HasOne("ITI.ExamSystem.Models.Topic", "Topic")
                        .WithMany("Questions")
                        .HasForeignKey("TopicID")
                        .IsRequired()
                        .HasConstraintName("FK_Question_Topic");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("ITI.ExamSystem.Models.QuestionChoice", b =>
                {
                    b.HasOne("ITI.ExamSystem.Models.Question", "Question")
                        .WithMany("QuestionChoices")
                        .HasForeignKey("QuestionID")
                        .IsRequired()
                        .HasConstraintName("FK_QuestionChoice_Question");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("ITI.ExamSystem.Models.Topic", b =>
                {
                    b.HasOne("ITI.ExamSystem.Models.Course", "Course")
                        .WithMany("Topics")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Topics__CourseID__373B3228");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("ITI.ExamSystem.Models.UserExam", b =>
                {
                    b.HasOne("ITI.ExamSystem.Models.Exam", "Exam")
                        .WithMany("UserExams")
                        .HasForeignKey("ExamID")
                        .IsRequired()
                        .HasConstraintName("FK_UserExam_Exam");

                    b.HasOne("ITI.ExamSystem.Models.User", "User")
                        .WithMany("UserExams")
                        .HasForeignKey("UserID")
                        .IsRequired()
                        .HasConstraintName("FK_UserExam_User");

                    b.Navigation("Exam");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ITI.ExamSystem.Models.UsersExamsQuestion", b =>
                {
                    b.HasOne("ITI.ExamSystem.Models.Exam", "Exam")
                        .WithMany()
                        .HasForeignKey("ExamID")
                        .IsRequired()
                        .HasConstraintName("FK_StudentAnswers_Exam");

                    b.HasOne("ITI.ExamSystem.Models.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionID")
                        .IsRequired()
                        .HasConstraintName("FK_StudentAnswers_Question");

                    b.HasOne("ITI.ExamSystem.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .IsRequired()
                        .HasConstraintName("FK_StudentAnswers_Student");

                    b.Navigation("Exam");

                    b.Navigation("Question");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ITI.ExamSystem.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ITI.ExamSystem.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITI.ExamSystem.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ITI.ExamSystem.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserRole", b =>
                {
                    b.HasOne("ITI.ExamSystem.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleID")
                        .IsRequired()
                        .HasConstraintName("FK_UserRoles_Role");

                    b.HasOne("ITI.ExamSystem.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserID")
                        .IsRequired()
                        .HasConstraintName("FK_UserRoles_User");
                });

            modelBuilder.Entity("UsersCourse", b =>
                {
                    b.HasOne("ITI.ExamSystem.Models.Course", null)
                        .WithMany()
                        .HasForeignKey("CourseID")
                        .IsRequired()
                        .HasConstraintName("FK_UsersCourses_Course");

                    b.HasOne("ITI.ExamSystem.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserID")
                        .IsRequired()
                        .HasConstraintName("FK_UsersCourses_User");
                });

            modelBuilder.Entity("ITI.ExamSystem.Models.Branch", b =>
                {
                    b.Navigation("IntakeBranchTrackUsers");

                    b.Navigation("PublishedExams");
                });

            modelBuilder.Entity("ITI.ExamSystem.Models.Course", b =>
                {
                    b.Navigation("Exams");

                    b.Navigation("PublishedExams");

                    b.Navigation("Topics");
                });

            modelBuilder.Entity("ITI.ExamSystem.Models.Exam", b =>
                {
                    b.Navigation("PublishedExams");

                    b.Navigation("UserExams");
                });

            modelBuilder.Entity("ITI.ExamSystem.Models.Intake", b =>
                {
                    b.Navigation("IntakeBranchTrackUsers");

                    b.Navigation("PublishedExams");
                });

            modelBuilder.Entity("ITI.ExamSystem.Models.Question", b =>
                {
                    b.Navigation("QuestionChoices");
                });

            modelBuilder.Entity("ITI.ExamSystem.Models.Topic", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("ITI.ExamSystem.Models.Track", b =>
                {
                    b.Navigation("IntakeBranchTrackUsers");

                    b.Navigation("PublishedExams");
                });

            modelBuilder.Entity("ITI.ExamSystem.Models.User", b =>
                {
                    b.Navigation("IntakeBranchTrackUsers");

                    b.Navigation("UserExams");
                });
#pragma warning restore 612, 618
        }
    }
}
